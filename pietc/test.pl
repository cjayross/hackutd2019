(define identity (lambda (x) x))
(define twice (lambda (x) (* 2 x)))
(define repeat (lambda (f) (lambda (y) (f (f y)))))
(define verbose (lambda (f) (lambda (y) (f y))))
;; (if #t (identity 10) (identity 0))
;; ((verbose (if #t identity)) 10)
;; ((if #t identity) 10)
;; ((if #t (repeat (repeat identity))) 10)
((repeat (if #t (repeat identity))) 10)
