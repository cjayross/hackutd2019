
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/%BREAK CHAR CONTINUE DEDENT ELIF ELSE EQUALS FALSE GREATEROREQUAL IF INDENT INT INTEGER LESSEROREQUAL NAME NEWLINE NOTEQUALS PRINT SCAN STRING TRUE WHILEfile_inputs : file_input\n                   | file_input file_inputs\n       file_input  : stmt\n                   | NEWLINEstmt : simple_stmt\n            | compound_stmtsimple_stmt : atom_chain_stmt NEWLINEcompound_stmt : if_stmt\n                     | while_stmtatom_chain_stmt : atom_stmt\n                       | atom_stmt ";"\n                       | atom_stmt ";" atom_chain_stmtatom_stmt : expr_stmt\n                 | print_stmt\n                 | scan_stmt\n                 | flow_stmtexpr_stmt : assign_expr\n                 | value_exprprint_stmt : PRINT CHAR NAME\n                  | PRINT CHAR INTEGER\n                  | PRINT CHAR STRING\n                  | PRINT INT NAME\n                  | PRINT INT INTEGER\n                  | PRINT INT STRINGscan_stmt : SCAN CHAR NAME\n                 | SCAN INT NAMEflow_stmt : BREAK\n                 | CONTINUEif_stmt : IF value_expr ":" block\n               | IF value_expr ":" block ELSE ":" block\n               | IF value_expr ":" block elif_chain_stmt\n               | IF value_expr ":" block elif_chain_stmt ELSE ":" blockelif_chain_stmt : ELIF value_expr ":" block\n                       | ELIF value_expr ":" block elif_chain_stmtwhile_stmt : WHILE value_expr ":" blockblock : simple_stmt\n             | NEWLINE INDENT stmt_chain_stmt DEDENTstmt_chain_stmt : stmt\n                       | stmt stmt_chain_stmtassign_expr : NAME "=" value_expr\n                   | NAME "=" STRINGvalue_expr : atom_expr\n                  | atom_expr compare_op value_exprcompare_op : "<"\n                  | ">"\n                  | LESSEROREQUAL\n                  | GREATEROREQUAL\n                  | EQUALS\n                  | NOTEQUALSatom_expr : term\n                 | term "+" atom_expr\n                 | term "-" atom_exprterm : factor\n            | factor "*" term\n            | factor "/" term\n            | factor "%" termfactor : atom\n              | "(" atom_expr ")"atom : INTEGER\n            | NAME\n            | TRUE\n            | FALSE'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,12,14,15,16,17,18,20,21,23,24,25,26,27,28,30,31,33,34,36,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,84,89,90,91,92,94,95,96,],[4,4,-3,-4,-5,-6,33,-8,-9,-10,-18,-13,-14,-15,-16,-17,-60,-59,-27,-28,-42,-50,-53,-57,-61,-62,-7,-11,-60,-12,78,78,-19,-20,-21,-22,-23,-24,-40,-41,-25,-26,-43,-51,-52,-54,-55,-56,-58,-29,-36,-35,-31,78,-30,78,78,-37,-32,-33,-34,]),'IF':([0,2,3,4,5,6,8,9,33,76,77,79,81,83,88,89,92,94,95,96,],[11,11,-3,-4,-5,-6,-8,-9,-7,-29,-36,-35,-31,11,11,-30,-37,-32,-33,-34,]),'WHILE':([0,2,3,4,5,6,8,9,33,76,77,79,81,83,88,89,92,94,95,96,],[13,13,-3,-4,-5,-6,-8,-9,-7,-29,-36,-35,-31,13,13,-30,-37,-32,-33,-34,]),'PRINT':([0,2,3,4,5,6,8,9,33,34,57,58,76,77,79,81,83,84,88,89,90,91,92,94,95,96,],[19,19,-3,-4,-5,-6,-8,-9,-7,19,19,19,-29,-36,-35,-31,19,19,19,-30,19,19,-37,-32,-33,-34,]),'SCAN':([0,2,3,4,5,6,8,9,33,34,57,58,76,77,79,81,83,84,88,89,90,91,92,94,95,96,],[22,22,-3,-4,-5,-6,-8,-9,-7,22,22,22,-29,-36,-35,-31,22,22,22,-30,22,22,-37,-32,-33,-34,]),'BREAK':([0,2,3,4,5,6,8,9,33,34,57,58,76,77,79,81,83,84,88,89,90,91,92,94,95,96,],[23,23,-3,-4,-5,-6,-8,-9,-7,23,23,23,-29,-36,-35,-31,23,23,23,-30,23,23,-37,-32,-33,-34,]),'CONTINUE':([0,2,3,4,5,6,8,9,33,34,57,58,76,77,79,81,83,84,88,89,90,91,92,94,95,96,],[24,24,-3,-4,-5,-6,-8,-9,-7,24,24,24,-29,-36,-35,-31,24,24,24,-30,24,24,-37,-32,-33,-34,]),'NAME':([0,2,3,4,5,6,8,9,11,13,29,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,76,77,79,81,82,83,84,88,89,90,91,92,94,95,96,],[20,20,-3,-4,-5,-6,-8,-9,36,36,36,-7,20,59,62,36,67,68,36,-44,-45,-46,-47,-48,-49,36,36,36,36,36,20,20,-29,-36,-35,-31,36,20,20,20,-30,20,20,-37,-32,-33,-34,]),'(':([0,2,3,4,5,6,8,9,11,13,29,33,34,40,43,44,45,46,47,48,49,50,51,52,53,54,57,58,76,77,79,81,82,83,84,88,89,90,91,92,94,95,96,],[29,29,-3,-4,-5,-6,-8,-9,29,29,29,-7,29,29,29,-44,-45,-46,-47,-48,-49,29,29,29,29,29,29,29,-29,-36,-35,-31,29,29,29,29,-30,29,29,-37,-32,-33,-34,]),'INTEGER':([0,2,3,4,5,6,8,9,11,13,29,33,34,38,39,40,43,44,45,46,47,48,49,50,51,52,53,54,57,58,76,77,79,81,82,83,84,88,89,90,91,92,94,95,96,],[21,21,-3,-4,-5,-6,-8,-9,21,21,21,-7,21,60,63,21,21,-44,-45,-46,-47,-48,-49,21,21,21,21,21,21,21,-29,-36,-35,-31,21,21,21,21,-30,21,21,-37,-32,-33,-34,]),'TRUE':([0,2,3,4,5,6,8,9,11,13,29,33,34,40,43,44,45,46,47,48,49,50,51,52,53,54,57,58,76,77,79,81,82,83,84,88,89,90,91,92,94,95,96,],[30,30,-3,-4,-5,-6,-8,-9,30,30,30,-7,30,30,30,-44,-45,-46,-47,-48,-49,30,30,30,30,30,30,30,-29,-36,-35,-31,30,30,30,30,-30,30,30,-37,-32,-33,-34,]),'FALSE':([0,2,3,4,5,6,8,9,11,13,29,33,34,40,43,44,45,46,47,48,49,50,51,52,53,54,57,58,76,77,79,81,82,83,84,88,89,90,91,92,94,95,96,],[31,31,-3,-4,-5,-6,-8,-9,31,31,31,-7,31,31,31,-44,-45,-46,-47,-48,-49,31,31,31,31,31,31,31,-29,-36,-35,-31,31,31,31,31,-30,31,31,-37,-32,-33,-34,]),'$end':([1,2,3,4,5,6,8,9,32,33,76,77,79,81,89,92,94,95,96,],[0,-1,-3,-4,-5,-6,-8,-9,-2,-7,-29,-36,-35,-31,-30,-37,-32,-33,-34,]),'DEDENT':([5,6,8,9,33,76,77,79,81,87,88,89,92,93,94,95,96,],[-5,-6,-8,-9,-7,-29,-36,-35,-31,92,-38,-30,-37,-39,-32,-33,-34,]),';':([10,12,14,15,16,17,18,20,21,23,24,25,26,27,28,30,31,36,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[34,-18,-13,-14,-15,-16,-17,-60,-59,-27,-28,-42,-50,-53,-57,-61,-62,-60,-19,-20,-21,-22,-23,-24,-40,-41,-25,-26,-43,-51,-52,-54,-55,-56,-58,]),'CHAR':([19,22,],[38,41,]),'INT':([19,22,],[39,42,]),'=':([20,],[40,]),'*':([20,21,27,28,30,31,36,75,],[-60,-59,52,-57,-61,-62,-60,-58,]),'/':([20,21,27,28,30,31,36,75,],[-60,-59,53,-57,-61,-62,-60,-58,]),'%':([20,21,27,28,30,31,36,75,],[-60,-59,54,-57,-61,-62,-60,-58,]),'+':([20,21,26,27,28,30,31,36,72,73,74,75,],[-60,-59,50,-53,-57,-61,-62,-60,-54,-55,-56,-58,]),'-':([20,21,26,27,28,30,31,36,72,73,74,75,],[-60,-59,51,-53,-57,-61,-62,-60,-54,-55,-56,-58,]),'<':([20,21,25,26,27,28,30,31,36,70,71,72,73,74,75,],[-60,-59,44,-50,-53,-57,-61,-62,-60,-51,-52,-54,-55,-56,-58,]),'>':([20,21,25,26,27,28,30,31,36,70,71,72,73,74,75,],[-60,-59,45,-50,-53,-57,-61,-62,-60,-51,-52,-54,-55,-56,-58,]),'LESSEROREQUAL':([20,21,25,26,27,28,30,31,36,70,71,72,73,74,75,],[-60,-59,46,-50,-53,-57,-61,-62,-60,-51,-52,-54,-55,-56,-58,]),'GREATEROREQUAL':([20,21,25,26,27,28,30,31,36,70,71,72,73,74,75,],[-60,-59,47,-50,-53,-57,-61,-62,-60,-51,-52,-54,-55,-56,-58,]),'EQUALS':([20,21,25,26,27,28,30,31,36,70,71,72,73,74,75,],[-60,-59,48,-50,-53,-57,-61,-62,-60,-51,-52,-54,-55,-56,-58,]),'NOTEQUALS':([20,21,25,26,27,28,30,31,36,70,71,72,73,74,75,],[-60,-59,49,-50,-53,-57,-61,-62,-60,-51,-52,-54,-55,-56,-58,]),':':([21,25,26,27,28,30,31,35,36,37,69,70,71,72,73,74,75,80,85,86,],[-59,-42,-50,-53,-57,-61,-62,57,-60,58,-43,-51,-52,-54,-55,-56,-58,84,90,91,]),')':([21,26,27,28,30,31,36,55,70,71,72,73,74,75,],[-59,-50,-53,-57,-61,-62,-60,75,-51,-52,-54,-55,-56,-58,]),'ELSE':([33,76,77,81,92,95,96,],[-7,80,-36,85,-37,-33,-34,]),'ELIF':([33,76,77,92,95,],[-7,82,-36,-37,82,]),'STRING':([38,39,40,],[61,64,66,]),'INDENT':([78,],[83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file_inputs':([0,2,],[1,32,]),'file_input':([0,2,],[2,2,]),'stmt':([0,2,83,88,],[3,3,88,88,]),'simple_stmt':([0,2,57,58,83,84,88,90,91,],[5,5,77,77,5,77,5,77,77,]),'compound_stmt':([0,2,83,88,],[6,6,6,6,]),'atom_chain_stmt':([0,2,34,57,58,83,84,88,90,91,],[7,7,56,7,7,7,7,7,7,7,]),'if_stmt':([0,2,83,88,],[8,8,8,8,]),'while_stmt':([0,2,83,88,],[9,9,9,9,]),'atom_stmt':([0,2,34,57,58,83,84,88,90,91,],[10,10,10,10,10,10,10,10,10,10,]),'value_expr':([0,2,11,13,34,40,43,57,58,82,83,84,88,90,91,],[12,12,35,37,12,65,69,12,12,86,12,12,12,12,12,]),'expr_stmt':([0,2,34,57,58,83,84,88,90,91,],[14,14,14,14,14,14,14,14,14,14,]),'print_stmt':([0,2,34,57,58,83,84,88,90,91,],[15,15,15,15,15,15,15,15,15,15,]),'scan_stmt':([0,2,34,57,58,83,84,88,90,91,],[16,16,16,16,16,16,16,16,16,16,]),'flow_stmt':([0,2,34,57,58,83,84,88,90,91,],[17,17,17,17,17,17,17,17,17,17,]),'assign_expr':([0,2,34,57,58,83,84,88,90,91,],[18,18,18,18,18,18,18,18,18,18,]),'atom_expr':([0,2,11,13,29,34,40,43,50,51,57,58,82,83,84,88,90,91,],[25,25,25,25,55,25,25,25,70,71,25,25,25,25,25,25,25,25,]),'term':([0,2,11,13,29,34,40,43,50,51,52,53,54,57,58,82,83,84,88,90,91,],[26,26,26,26,26,26,26,26,26,26,72,73,74,26,26,26,26,26,26,26,26,]),'factor':([0,2,11,13,29,34,40,43,50,51,52,53,54,57,58,82,83,84,88,90,91,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'atom':([0,2,11,13,29,34,40,43,50,51,52,53,54,57,58,82,83,84,88,90,91,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'compare_op':([25,],[43,]),'block':([57,58,84,90,91,],[76,79,89,94,95,]),'elif_chain_stmt':([76,95,],[81,96,]),'stmt_chain_stmt':([83,88,],[87,93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file_inputs","S'",1,None,None,None),
  ('file_inputs -> file_input','file_inputs',1,'p_file_inputs','parse.py',14),
  ('file_inputs -> file_input file_inputs','file_inputs',2,'p_file_inputs','parse.py',15),
  ('file_input -> stmt','file_input',1,'p_file_inputs','parse.py',16),
  ('file_input -> NEWLINE','file_input',1,'p_file_inputs','parse.py',17),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','parse.py',21),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','parse.py',22),
  ('simple_stmt -> atom_chain_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','parse.py',26),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','parse.py',30),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','parse.py',31),
  ('atom_chain_stmt -> atom_stmt','atom_chain_stmt',1,'p_atom_chain_stmt','parse.py',35),
  ('atom_chain_stmt -> atom_stmt ;','atom_chain_stmt',2,'p_atom_chain_stmt','parse.py',36),
  ('atom_chain_stmt -> atom_stmt ; atom_chain_stmt','atom_chain_stmt',3,'p_atom_chain_stmt','parse.py',37),
  ('atom_stmt -> expr_stmt','atom_stmt',1,'p_atom_stmt','parse.py',41),
  ('atom_stmt -> print_stmt','atom_stmt',1,'p_atom_stmt','parse.py',42),
  ('atom_stmt -> scan_stmt','atom_stmt',1,'p_atom_stmt','parse.py',43),
  ('atom_stmt -> flow_stmt','atom_stmt',1,'p_atom_stmt','parse.py',44),
  ('expr_stmt -> assign_expr','expr_stmt',1,'p_expr_stmt','parse.py',48),
  ('expr_stmt -> value_expr','expr_stmt',1,'p_expr_stmt','parse.py',49),
  ('print_stmt -> PRINT CHAR NAME','print_stmt',3,'p_print_stmt','parse.py',53),
  ('print_stmt -> PRINT CHAR INTEGER','print_stmt',3,'p_print_stmt','parse.py',54),
  ('print_stmt -> PRINT CHAR STRING','print_stmt',3,'p_print_stmt','parse.py',55),
  ('print_stmt -> PRINT INT NAME','print_stmt',3,'p_print_stmt','parse.py',56),
  ('print_stmt -> PRINT INT INTEGER','print_stmt',3,'p_print_stmt','parse.py',57),
  ('print_stmt -> PRINT INT STRING','print_stmt',3,'p_print_stmt','parse.py',58),
  ('scan_stmt -> SCAN CHAR NAME','scan_stmt',3,'p_scan_stmt','parse.py',62),
  ('scan_stmt -> SCAN INT NAME','scan_stmt',3,'p_scan_stmt','parse.py',63),
  ('flow_stmt -> BREAK','flow_stmt',1,'p_flow_stmt','parse.py',67),
  ('flow_stmt -> CONTINUE','flow_stmt',1,'p_flow_stmt','parse.py',68),
  ('if_stmt -> IF value_expr : block','if_stmt',4,'p_if_stmt','parse.py',72),
  ('if_stmt -> IF value_expr : block ELSE : block','if_stmt',7,'p_if_stmt','parse.py',73),
  ('if_stmt -> IF value_expr : block elif_chain_stmt','if_stmt',5,'p_if_stmt','parse.py',74),
  ('if_stmt -> IF value_expr : block elif_chain_stmt ELSE : block','if_stmt',8,'p_if_stmt','parse.py',75),
  ('elif_chain_stmt -> ELIF value_expr : block','elif_chain_stmt',4,'p_elif_chain_stmt','parse.py',79),
  ('elif_chain_stmt -> ELIF value_expr : block elif_chain_stmt','elif_chain_stmt',5,'p_elif_chain_stmt','parse.py',80),
  ('while_stmt -> WHILE value_expr : block','while_stmt',4,'p_while_stmt','parse.py',84),
  ('block -> simple_stmt','block',1,'p_block','parse.py',88),
  ('block -> NEWLINE INDENT stmt_chain_stmt DEDENT','block',4,'p_block','parse.py',89),
  ('stmt_chain_stmt -> stmt','stmt_chain_stmt',1,'p_stmt_chain_stmt','parse.py',96),
  ('stmt_chain_stmt -> stmt stmt_chain_stmt','stmt_chain_stmt',2,'p_stmt_chain_stmt','parse.py',97),
  ('assign_expr -> NAME = value_expr','assign_expr',3,'p_assign_expr','parse.py',101),
  ('assign_expr -> NAME = STRING','assign_expr',3,'p_assign_expr','parse.py',102),
  ('value_expr -> atom_expr','value_expr',1,'p_value_expr','parse.py',106),
  ('value_expr -> atom_expr compare_op value_expr','value_expr',3,'p_value_expr','parse.py',107),
  ('compare_op -> <','compare_op',1,'p_compare_op','parse.py',124),
  ('compare_op -> >','compare_op',1,'p_compare_op','parse.py',125),
  ('compare_op -> LESSEROREQUAL','compare_op',1,'p_compare_op','parse.py',126),
  ('compare_op -> GREATEROREQUAL','compare_op',1,'p_compare_op','parse.py',127),
  ('compare_op -> EQUALS','compare_op',1,'p_compare_op','parse.py',128),
  ('compare_op -> NOTEQUALS','compare_op',1,'p_compare_op','parse.py',129),
  ('atom_expr -> term','atom_expr',1,'p_atom_expr','parse.py',133),
  ('atom_expr -> term + atom_expr','atom_expr',3,'p_atom_expr','parse.py',134),
  ('atom_expr -> term - atom_expr','atom_expr',3,'p_atom_expr','parse.py',135),
  ('term -> factor','term',1,'p_term','parse.py',144),
  ('term -> factor * term','term',3,'p_term','parse.py',145),
  ('term -> factor / term','term',3,'p_term','parse.py',146),
  ('term -> factor % term','term',3,'p_term','parse.py',147),
  ('factor -> atom','factor',1,'p_factor','parse.py',158),
  ('factor -> ( atom_expr )','factor',3,'p_factor','parse.py',159),
  ('atom -> INTEGER','atom',1,'p_atom','parse.py',166),
  ('atom -> NAME','atom',1,'p_atom','parse.py',167),
  ('atom -> TRUE','atom',1,'p_atom','parse.py',168),
  ('atom -> FALSE','atom',1,'p_atom','parse.py',169),
]
